name: Deploy to cPanel

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Create Express .env file
      run: |
        echo "# MongoDB Atlas Connection" > .env
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" >> .env
        echo "MONGODB_DB=FreshShareDB" >> .env
        echo "PORT=3001" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        echo "FASTIFY_BACKEND_URL=http://localhost:8080" >> .env
        
        # Handle BASE_URL special case for root deployment
        BASE_URL="${{ secrets.BASE_URL }}"
        if [ "$BASE_URL" = " " ]; then
          BASE_URL=""
        fi
        echo "BASE_URL=$BASE_URL" >> .env
        
        echo "NODE_ENV=production" >> .env
        echo "USDA_API_KEY=${{ secrets.USDA_API_KEY }}" >> .env

    - name: Create Fastify .env file
      run: |
        mkdir -p fastify-backend
        echo "PORT=8080" > fastify-backend/.env
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> fastify-backend/.env
        echo "NODE_ENV=production" >> fastify-backend/.env

    - name: Install dependencies
      run: npm install

    - name: Deploy to cPanel
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        password: ${{ secrets.SERVER_PASS }}
        script: |
          cd ~/public_html/
          mkdir -p freshshare
          cd freshshare
          
          # Clear previous files but keep node_modules
          find . -mindepth 1 -maxdepth 1 -not -name "node_modules" -exec rm -rf {} \;
          
          # Copy all files from current directory to the server
          echo "Copying files to server..."
          
          # Copy current project files to cPanel
          cd /tmp
          git clone https://github.com/Ch3fC0d3/FreshShare2.1.git
          cd FreshShare2.1
          
          # Copy files to the target directory
          cp -rf * ~/public_html/freshshare/
          cp -rf .env ~/public_html/freshshare/
          cp -rf .htaccess ~/public_html/freshshare/ 2>/dev/null || echo "No .htaccess file found"
          
          # Set up node environment
          cd ~/public_html/freshshare
          npm install --production
          
          # Create startup scripts
          echo "#!/bin/bash" > start-backend-prod.sh
          echo "cd ~/public_html/freshshare && NODE_ENV=production nohup node server.js > server.log 2>&1 &" >> start-backend-prod.sh
          chmod +x start-backend-prod.sh
          
          # Create fastify backend startup script
          mkdir -p fastify-backend
          echo "#!/bin/bash" > fastify-backend/start-fastify-prod.sh
          echo "cd ~/public_html/freshshare/fastify-backend && NODE_ENV=production nohup node index.js > fastify.log 2>&1 &" >> fastify-backend/start-fastify-prod.sh
          chmod +x fastify-backend/start-fastify-prod.sh
          
          # Stop any existing processes
          pkill -f "node server.js" || echo "No Express server running"
          pkill -f "node index.js" || echo "No Fastify server running"
          
          # Start servers
          ./start-backend-prod.sh
          cd fastify-backend && ./start-fastify-prod.sh
          
          # Verify servers are running
          echo "Verifying servers are running..."
          ps aux | grep "node server.js"
          ps aux | grep "node index.js"
          
          # Create cron job to ensure server stays running
          CRON_JOB="*/5 * * * * cd ~/public_html/freshshare && ./start-backend-prod.sh >> cron.log 2>&1"
          (crontab -l 2>/dev/null | grep -v "freshshare && ./start-backend-prod.sh" || echo "") | { cat; echo "$CRON_JOB"; } | crontab -
          
          echo "Deployment completed successfully!"

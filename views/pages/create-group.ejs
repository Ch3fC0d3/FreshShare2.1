<%- contentFor('style') %>
<style>
    .create-group-container {
        max-width: 800px;
        margin: 0 auto;
        padding: 20px;
    }
    
    .form-section {
        margin-bottom: 30px;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    
    .form-section h3 {
        margin-bottom: 20px;
        color: #2c3e50;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }
    
    .form-group {
        margin-bottom: 20px;
    }
    
    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #333;
    }
    
    .form-group input,
    .form-group textarea,
    .form-group select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
    }
    
    .form-group textarea {
        min-height: 100px;
    }
    
    .form-group select {
        height: 42px;
    }
    
    .delivery-days {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }
    
    .day-checkbox {
        display: flex;
        align-items: center;
        margin-right: 15px;
    }
    
    .day-checkbox input {
        margin-right: 5px;
        width: auto;
    }
    
    .required-field::after {
        content: "*";
        color: #e74c3c;
        margin-left: 4px;
    }
    
    .form-actions {
        display: flex;
        justify-content: space-between;
        margin-top: 30px;
    }
    
    .preview-image {
        max-width: 100%;
        height: 200px;
        object-fit: cover;
        border-radius: 8px;
        margin-top: 10px;
        display: none;
    }
    
    .error-message {
        color: #e74c3c;
        font-size: 14px;
        margin-top: 5px;
        display: none;
    }
</style>

<%- contentFor('body') %>
<div class="main-content">
    <div class="create-group-container">
        <h1 class="page-title">Create a New Group</h1>
        <p class="page-description">
            Create a group to connect with people who share your interests in food, gardening, or community building.
        </p>
        
        <!-- Auth Debug Info -->
        <div id="auth-debug" style="background-color: #f8f9fa; padding: 10px; margin-bottom: 20px; border-radius: 5px;">
            <h5>Authentication Debug</h5>
            <div id="cookie-status"></div>
            <div id="localstorage-status"></div>
            <div id="token-value"></div>
            <button id="debug-toggle" class="btn btn-sm btn-secondary mt-2">Show Token</button>
        </div>
        
        <form id="create-group-form">
            <!-- Basic Information -->
            <div class="form-section">
                <h3>Basic Information</h3>
                
                <div class="form-group">
                    <label for="group-name" class="required-field">Group Name</label>
                    <input type="text" id="group-name" name="name" required placeholder="Enter a unique name for your group">
                    <div class="error-message" id="name-error"></div>
                </div>
                
                <div class="form-group">
                    <label for="group-category" class="required-field">Category</label>
                    <select id="group-category" name="category" required>
                        <option value="" disabled selected>Select a category</option>
                        <option value="neighborhood">Neighborhood Group</option>
                        <option value="community_garden">Community Garden</option>
                        <option value="food_bank">Food Bank / Pantry</option>
                        <option value="cooking_club">Cooking Club</option>
                        <option value="other">Other</option>
                    </select>
                    <div class="error-message" id="category-error"></div>
                </div>
                
                <div class="form-group">
                    <label for="group-description" class="required-field">Description</label>
                    <textarea id="group-description" name="description" required placeholder="Describe your group's purpose, goals, and activities"></textarea>
                    <div class="error-message" id="description-error"></div>
                </div>
            </div>
            
            <!-- Location Information -->
            <div class="form-section">
                <h3>Location</h3>
                
                <div class="form-group">
                    <label for="group-street">Street Address</label>
                    <input type="text" id="group-street" name="location.street" placeholder="Street address (optional)">
                </div>
                
                <div class="form-group">
                    <label for="group-city" class="required-field">City</label>
                    <input type="text" id="group-city" name="location.city" required placeholder="City">
                    <div class="error-message" id="city-error"></div>
                </div>
                
                <div class="form-group">
                    <label for="group-state">State/Province</label>
                    <input type="text" id="group-state" name="location.state" placeholder="State or province">
                </div>
                
                <div class="form-group">
                    <label for="group-zipcode" class="required-field">Zip/Postal Code</label>
                    <input type="text" id="group-zipcode" name="location.zipCode" required placeholder="Zip or postal code">
                    <div class="error-message" id="zipcode-error"></div>
                </div>
            </div>
            
            <!-- Group Settings -->
            <div class="form-section">
                <h3>Group Settings</h3>
                
                <div class="form-group">
                    <label for="group-rules">Group Rules</label>
                    <textarea id="group-rules" name="rules" placeholder="Set some ground rules for your group (optional)"></textarea>
                </div>
                
                <div class="form-group">
                    <label class="required-field">Delivery Days</label>
                    <p class="form-hint">Select days when your group typically receives deliveries or meets</p>
                    <div class="delivery-days">
                        <div class="day-checkbox">
                            <input type="checkbox" id="monday" name="deliveryDays" value="Monday">
                            <label for="monday">Monday</label>
                        </div>
                        <div class="day-checkbox">
                            <input type="checkbox" id="tuesday" name="deliveryDays" value="Tuesday">
                            <label for="tuesday">Tuesday</label>
                        </div>
                        <div class="day-checkbox">
                            <input type="checkbox" id="wednesday" name="deliveryDays" value="Wednesday">
                            <label for="wednesday">Wednesday</label>
                        </div>
                        <div class="day-checkbox">
                            <input type="checkbox" id="thursday" name="deliveryDays" value="Thursday">
                            <label for="thursday">Thursday</label>
                        </div>
                        <div class="day-checkbox">
                            <input type="checkbox" id="friday" name="deliveryDays" value="Friday">
                            <label for="friday">Friday</label>
                        </div>
                        <div class="day-checkbox">
                            <input type="checkbox" id="saturday" name="deliveryDays" value="Saturday">
                            <label for="saturday">Saturday</label>
                        </div>
                        <div class="day-checkbox">
                            <input type="checkbox" id="sunday" name="deliveryDays" value="Sunday">
                            <label for="sunday">Sunday</label>
                        </div>
                    </div>
                    <div class="error-message" id="delivery-days-error"></div>
                </div>
                
                <div class="form-group">
                    <label for="group-privacy">Privacy Setting</label>
                    <select id="group-privacy" name="isPrivate">
                        <option value="false">Public - Anyone can find and join</option>
                        <option value="true">Private - By invitation only</option>
                    </select>
                </div>
            </div>
            
            <div class="form-actions">
                <button type="button" class="btn btn-outline" id="cancel-btn">Cancel</button>
                <button type="submit" class="btn btn-primary" id="create-btn">Create Group</button>
            </div>
        </form>
    </div>
</div>

<%- contentFor('script') %>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const form = document.getElementById('create-group-form');
        const cancelBtn = document.getElementById('cancel-btn');
        
        // Debug authentication status
        const cookieStatus = document.getElementById('cookie-status');
        const localStorageStatus = document.getElementById('localstorage-status');
        const tokenValue = document.getElementById('token-value');
        const debugToggle = document.getElementById('debug-toggle');
        
        // Check cookie token
        const hasCookieToken = document.cookie.includes('token');
        cookieStatus.innerHTML = `<strong>Cookie Token:</strong> ${hasCookieToken ? 'Present' : 'Not found'}`;
        cookieStatus.style.color = hasCookieToken ? 'green' : 'red';
        
        // Check localStorage token
        const localToken = localStorage.getItem('token');
        localStorageStatus.innerHTML = `<strong>LocalStorage Token:</strong> ${localToken ? 'Present' : 'Not found'}`;
        localStorageStatus.style.color = localToken ? 'green' : 'red';
        
        // Setup token display toggle
        debugToggle.addEventListener('click', function() {
            if (debugToggle.textContent === 'Show Token') {
                // Extract token from cookie
                let cookieToken = '';
                const cookies = document.cookie.split(';');
                for (let i = 0; i < cookies.length; i++) {
                    const cookie = cookies[i].trim();
                    if (cookie.startsWith('token=')) {
                        cookieToken = cookie.substring('token='.length);
                        break;
                    }
                }
                
                tokenValue.innerHTML = `<strong>Cookie Token Value:</strong> ${cookieToken ? cookieToken.substring(0, 10) + '...' : 'None'}<br>` +
                                      `<strong>LocalStorage Token Value:</strong> ${localToken ? localToken.substring(0, 10) + '...' : 'None'}`;
                debugToggle.textContent = 'Hide Token';
            } else {
                tokenValue.innerHTML = '';
                debugToggle.textContent = 'Show Token';
            }
        });
        
        // Preview category image when category changes
        const categorySelect = document.getElementById('group-category');
        
        // Cancel button redirects back to groups page
        cancelBtn.addEventListener('click', function(e) {
            e.preventDefault();
            window.location.href = '/groups';
        });
        
        // Form submission
        form.addEventListener('submit', async function(e) {
            e.preventDefault();
            
            // Reset error messages
            const errorMessages = document.querySelectorAll('.error-message');
            errorMessages.forEach(el => {
                el.style.display = 'none';
                el.textContent = '';
            });
            
            // Skip client-side token checks and rely on server-side authentication
            // The server will handle authentication through cookies or redirect as needed
            
            // Validate form
            let isValid = true;
            
            // Check required fields
            const requiredFields = [
                { id: 'group-name', error: 'name-error', message: 'Group name is required (min 3 characters)' },
                { id: 'group-description', error: 'description-error', message: 'Group description is required (min 10 characters)' },
                { id: 'group-city', error: 'city-error', message: 'City is required' },
                { id: 'group-zipcode', error: 'zipcode-error', message: 'Zip/Postal code is required' }
            ];
            
            requiredFields.forEach(field => {
                const input = document.getElementById(field.id);
                const value = input.value.trim();
                
                if (!value) {
                    const errorEl = document.getElementById(field.error);
                    errorEl.textContent = field.message;
                    errorEl.style.display = 'block';
                    isValid = false;
                } else if (field.id === 'group-name' && value.length < 3) {
                    const errorEl = document.getElementById(field.error);
                    errorEl.textContent = 'Group name must be at least 3 characters';
                    errorEl.style.display = 'block';
                    isValid = false;
                } else if (field.id === 'group-description' && value.length < 10) {
                    const errorEl = document.getElementById(field.error);
                    errorEl.textContent = 'Description must be at least 10 characters';
                    errorEl.style.display = 'block';
                    isValid = false;
                }
            });
            
            // Check category
            const category = document.getElementById('group-category').value;
            if (!category) {
                const errorEl = document.getElementById('category-error');
                errorEl.textContent = 'Please select a category';
                errorEl.style.display = 'block';
                isValid = false;
            }
            
            // Check if at least one delivery day is selected
            const deliveryDays = document.querySelectorAll('input[name="deliveryDays"]:checked');
            if (deliveryDays.length === 0) {
                const errorEl = document.getElementById('delivery-days-error');
                errorEl.textContent = 'Please select at least one delivery day';
                errorEl.style.display = 'block';
                isValid = false;
            }
            
            if (!isValid) {
                return;
            }
            
            // Get form data
            const formData = {
                name: document.getElementById('group-name').value.trim(),
                category: category,
                description: document.getElementById('group-description').value.trim(),
                location: {
                    street: document.getElementById('group-street').value.trim() || '',
                    city: document.getElementById('group-city').value.trim(),
                    state: document.getElementById('group-state').value.trim() || '',
                    zipCode: document.getElementById('group-zipcode').value.trim()
                },
                rules: document.getElementById('group-rules').value.trim() || '',
                isPrivate: document.getElementById('group-privacy').checked,
                deliveryDays: Array.from(deliveryDays).map(day => day.value)
            };
            
            console.log('Submitting group data:', formData);
            
            try {
                // Get token from localStorage if available
                const token = localStorage.getItem('token');
                
                // Prepare headers with token if available
                const headers = {
                    'Content-Type': 'application/json'
                };
                
                if (token) {
                    headers['Authorization'] = `Bearer ${token}`;
                    console.log('Including token in Authorization header');
                }
                
                // Submit form data to API with token in Authorization header
                const response = await fetch('/api/groups', {
                    method: 'POST',
                    headers: headers,
                    credentials: 'same-origin', // Include cookies in the request
                    body: JSON.stringify(formData)
                });
                
                console.log('API Response status:', response.status);
                const data = await response.json();
                console.log('API Response data:', data);
                
                if (response.ok && data.success) {
                    // Redirect to the groups page instead of the specific group
                    window.location.href = '/groups';
                } else if (response.status === 401) {
                    // Authentication error - redirect to login page
                    console.log('Authentication required. Redirecting to login page.');
                    const debugInfo = document.getElementById('auth-debug');
                    if (debugInfo) {
                        debugInfo.innerHTML += `<div class="alert alert-danger">Server says you are not authenticated. Redirecting to login page...</div>`;
                    }
                    
                    // Add the token to localStorage before redirecting (for debugging)
                    if (localStorage.getItem('token')) {
                        console.log('Token exists in localStorage. Token value:', localStorage.getItem('token').substring(0, 10) + '...');
                    } else {
                        console.log('No token in localStorage');
                    }
                    
                    // Redirect to login page
                    setTimeout(() => {
                        window.location.href = data.redirect || '/login?redirect=/create-group';
                    }, 2000);
                } else {
                    // Show validation errors if present
                    if (data.errors && Array.isArray(data.errors)) {
                        data.errors.forEach(error => {
                            const field = error.split(' ')[0].toLowerCase();
                            const errorEl = document.getElementById(`${field}-error`);
                            if (errorEl) {
                                errorEl.textContent = error;
                                errorEl.style.display = 'block';
                            }
                        });
                    } else {
                        // Show general error message
                        const errorMessage = data.message || 'An unknown error occurred';
                        console.error('Failed to create group:', errorMessage);
                        alert('Failed to create group: ' + errorMessage);
                    }
                }
            } catch (error) {
                console.error('Error creating group:', error);
                alert('An error occurred while creating the group. Please try again.');
            }
        });
    });
</script>
